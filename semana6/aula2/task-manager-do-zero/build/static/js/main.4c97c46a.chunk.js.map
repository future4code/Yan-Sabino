{"version":3,"sources":["Components/TaskForm/TaskForm.js","Components/TaskContainer/TaskContainer.js","App.js","serviceWorker.js","index.js"],"names":["FormContainer","styled","div","StyledInput","input","TaskForm","props","onChangeTarefa","e","setState","valorInputLista","target","value","aoClicarAdicionar","adicionaList","state","valorSelect","type","placeholder","this","onChange","onClick","React","Component","MainContainer","listaDeAtividades","TaskContainer","tarefa","novaTarefaAdd","nomeTarefa","copiaTarefa","push","mostraLista","map","tarefaAdd","console","log","listaDeAtividadesAdd","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ipBAGA,IAAMA,EAAgBC,IAAOC,IAAV,KASbC,EAAcF,IAAOG,MAAV,KAIIC,E,YACjB,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KAOVC,eAAiB,SAAAC,GACb,EAAKC,SAAS,CAACC,gBAAiBF,EAAEG,OAAOC,SAT3B,EAYlBC,kBAAoB,WAChB,EAAKP,MAAMQ,aAAa,EAAKC,MAAML,iBAEnC,EAAKD,SAAS,CACVC,gBAAiB,MAdrB,EAAKK,MAAM,CACPL,gBAAiB,GACjBM,YAAa,UAJH,E,sEAqBd,OACI,kBAAChB,EAAD,KACI,gDACA,kBAACG,EAAD,CACAc,KAAK,OACLC,YAAY,qBACZN,MAAOO,KAAKJ,MAAML,gBAClBU,SAAUD,KAAKZ,iBAEf,4BAAQc,QAASF,KAAKN,mBAAtB,aACA,yCACA,gCACI,4BAAQD,MAAM,UAAd,UACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,UAAd,iB,GApCkBU,IAAMC,W,8ICT5C,IAAMC,EAAgBvB,IAAOC,IAAV,KAMbuB,EAAoB,GAGLC,E,YACjB,WAAYpB,GAAO,IAAD,8BACd,4CAAMA,KAOVQ,aAAe,SAACa,GACZ,IAAMC,EAAgB,CAClBC,WAAYF,GAGVG,EAAW,YAAO,EAAKf,MAAMU,mBAEnCK,EAAYC,KAAKH,GAEjB,EAAKnB,SAAS,CAACoB,WAAYC,KAjBb,EAqBlBE,YAAc,WACV,OAAO,EAAKjB,MAAMU,kBAAkBQ,KAAI,SAAAC,GAExC,OADIC,QAAQC,IAAI,UAAWF,GACrB,4BAAKA,OArBX,EAAKnB,MAAQ,CACTU,kBAAmBA,GAJT,E,sEA6Bd,IAAMY,EAAuBlB,KAAKa,cAIlC,OACI,kBAACR,EAAD,KACI,kBAAC,EAAD,CAAUV,aAAcK,KAAKL,eAChC,4BAAKuB,Q,GArCyBf,IAAMC,WCLlCe,E,iLALX,OAAO,kBAAC,EAAD,U,GAFOhB,IAAMC,WCQJgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4c97c46a.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from \"styled-components\";\r\n\r\nconst FormContainer = styled.div`\r\n  border: 1px solid gray;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  margin-bottom: 10px;\r\n  padding: 10px;\r\n`;\r\n\r\nconst StyledInput = styled.input`\r\n  margin-bottom: 5px;\r\n`;\r\n\r\nexport default class TaskForm extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            valorInputLista: \"\",\r\n            valorSelect: \"Nenhum\"\r\n        }\r\n    }\r\n\r\n    onChangeTarefa = e =>{\r\n        this.setState({valorInputLista: e.target.value})\r\n    }\r\n\r\n    aoClicarAdicionar = () => {\r\n        this.props.adicionaList(this.state.valorInputLista)\r\n\r\n        this.setState({\r\n            valorInputLista: \"\"\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <FormContainer>\r\n                <h2>Lista de Tarefas</h2>\r\n                <StyledInput\r\n                type=\"text\"\r\n                placeholder=\"Escreva sua Tarefa\"\r\n                value={this.state.valorInputLista}\r\n                onChange={this.onChangeTarefa}\r\n                />\r\n                <button onClick={this.aoClicarAdicionar}>Adicionar</button>\r\n                <label> Filtro\r\n                <select>\r\n                    <option value=\"Nenhum\">Nenhum</option>\r\n                    <option value=\"Nenhum\">Nenhum</option>\r\n                    <option value=\"Nenhum\">Nenhum</option>\r\n                </select>\r\n                </label>  \r\n            </FormContainer>\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport TaskForm from '../TaskForm/TaskForm'\r\nimport TaskFormSelect from '../TaskForm/TaskFormSelect'\r\nimport TaskList from '../TaskList/TaskList'\r\nimport TaskListRiscada from '../TaskList/TaskListRiscada'\r\n\r\nconst MainContainer = styled.div`\r\n  padding: 5px;\r\n  width: 400px;\r\n  margin: 0 auto;\r\n`;\r\n\r\nconst listaDeAtividades = []\r\n\r\n\r\nexport default class TaskContainer extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.state = {\r\n            listaDeAtividades: listaDeAtividades\r\n        }\r\n    }\r\n\r\n    adicionaList = (tarefa) =>{\r\n        const novaTarefaAdd = {\r\n            nomeTarefa: tarefa\r\n        }\r\n\r\n        const copiaTarefa = [...this.state.listaDeAtividades]\r\n\r\n        copiaTarefa.push(novaTarefaAdd)\r\n\r\n        this.setState({nomeTarefa: copiaTarefa})\r\n    }\r\n\r\n\r\n    mostraLista = () =>{\r\n        return this.state.listaDeAtividades.map(tarefaAdd => {\r\n            console.log(\"tarefa:\", tarefaAdd)\r\n        return<li>{tarefaAdd}</li>\r\n        })\r\n    }\r\n\r\n    render(){\r\n        const listaDeAtividadesAdd = this.mostraLista()\r\n\r\n\r\n\r\n        return(\r\n            <MainContainer>\r\n                <TaskForm adicionaList={this.adicionaList}/>\r\n             <ul>{listaDeAtividadesAdd}</ul>\r\n            </MainContainer>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport TaskContainer from './Components/TaskContainer/TaskContainer'\n\n\nclass App extends React.Component {\n  render(){\n    return <TaskContainer/>\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}